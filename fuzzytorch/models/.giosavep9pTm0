from __future__ import print_function
from __future__ import division
from . import C_

import torch
import torch.nn as nn
import torch.nn.functional as F 
from ..utils import tensor_to_numpy
from .basics import Linear, MLP
#from cnn.basics import ConvLinear
from . import utils as utils
import fuzzytools.strings as strings
import numpy as np
import math
from .attn.batch_norms import LayerNorm, MaskedBatchNorm1d

###################################################################################################################################################

def softclamp_lrelu(x, a, b,
	negative_slope=0.001,
	):
	assert a<b
	#z = torch.clamp(x, a, s)
	z = F.leaky_relu(x-a, negative_slope=negative_slope)+a
	z = -(F.leaky_relu(-z+b, negative_slope=negative_slope)-b)
	return z

def softclamp_elu(x, a, b,
	alpha=0.1,
	):
	assert a<b
	#z = torch.clamp(x, a, s)
	z = F.elu(x-a)+a
	z = -(F.elu(-z+b)-b)
	return z

def softclamp(x, a, b):
	return softclamp_lrelu(x, a, b)

def cyclic_mod(x, a, b):
	assert b>a
	return (x-a)%(b-a)+a
	
def xxx(te_ws, te_phases, time,
	uses_linear_term=False, # False* True
	):
	'''
	te_ws (f)
	te_phases (f)
	time (b,t)
	'''
	#print(te_ws.shape, te_phases.shape, time.shape)
	b,t = time.size()
	f = len(te_ws)
	_te_ws = te_ws[None,None,:] # (f) > (1,1,f)
	_te_phases = te_phases[None,None,:] # (f) > (1,1,f)
	_time = time[...,None] # (b,t) > (b,t,1)
	if uses_linear_term:
		encoding1 = _te_ws[...,0][...,None]*_time+_te_phases[...,0][...,None] # (b,t,f)
		encoding2 = torch.sin(_te_ws[...,1:]*_time+_te_phases[...,1:]) # (b,t,f)
		#print(encoding1.shape, encoding2.shape)
		encoding = torch.cat([encoding1, encoding2], axis=-1)
	else:
		encoding = torch.sin(_te_ws*_time+_te_phases) # (b,t,f)
	#print(encoding.shape)
	#te_ws.dtype, te_phases.dtype, time.dtype)
	return encoding

def _te(te_ws, te_phases, te_scales, time):
	'''
	te_ws (f)
	te_phases (f)
	time (b,t)
	'''
	b,t = time.size()
	encoding = torch.zeros((b, t, len(te_phases)), device=time.device) # (b,t,f)
	for i in range(0, len(te_ws)):
		w = te_ws[i]
		phi = te_phases[i]
		scale = te_scales[i]
		encoding[...,i] = scale*torch.sin(w*time+phi)
	return encoding

###################################################################################################################################################

class TemporalEncoding(nn.Module):
	def __init__(self, te_features, max_te_period,
		min_te_period=None, # 2 None
		requires_grad=False, # False True
		random_init=False, # True False
		time_noise_window=0, # regularization in time units
		**kwargs):
		super().__init__()

		### CHECKS
		assert te_features>0
		assert te_features%2==0

		self.te_features = te_features
		self.max_te_period = max_te_period
		self.min_te_period = min_te_period
		self.requires_grad = requires_grad
		self.random_init = random_init
		self.time_noise_window = eval(time_noise_window) if isinstance(time_noise_window, str) else time_noise_window
		self.reset()

	def reset(self):
		periods, phases = self.generate_initial_tensors()
		self.initial_ws = self.period2w(periods)
		self.initial_phases = phases

		self.min_w = np.min(self.initial_ws)
		self.max_w = np.max(self.initial_ws)

		if self.random_init:
			#self.te_ws = torch.nn.Parameter(torch.normal(0., 0.1, size=[self.get_output_dims()]), requires_grad=True) # True False
			#self.te_phases = torch.nn.Parameter(torch.normal(0., 0.1, size=[self.get_output_dims()]), requires_grad=True) # True False
			pass
		else:
			self.te_ws = torch.nn.Parameter(torch.as_tensor(self.initial_ws), requires_grad=False)
			self.te_phases = torch.nn.Parameter(torch.as_tensor(self.initial_phases), requires_grad=False)

		# self.te_scales = torch.nn.Parameter(torch.ones_like(self.te_ws), requires_grad=False)
		n = self.get_output_dims()//2
		k_exp = 2
		te_scales = np.array([math.exp(-math.floor(i/2)*k_exp) for i in range(0, 2*n)]).astype(np.float32)
		self.te_scales = torch.nn.Parameter(torch.as_tensor(te_scales), requires_grad=False)

	def generate_initial_tensors(self):
		if self.min_te_period is None:
			n = self.get_output_dims()//2
			#periods = np.repeat(np.array([self.max_te_period/2**i for i in np.arange(n)]), 2, axis=0).astype(np.float32) # juxta
			periods = np.repeat(np.array([self.max_te_period/(i+1) for i in np.arange(n)]), 2, axis=0).astype(np.float32) # fourier
			phases = np.array([math.pi/2 if i%2==0 else 0 for i in range(0, 2*n)]).astype(np.float32)
		else:
			periods = np.linspace(self.max_te_period, self.min_te_period, self.get_output_dims()).astype(np.float32)
			phases = np.zeros_like(periods).astype(np.float32)
		
		return periods, phases

	def w2period(self, w):
		return 2*math.pi/w

	def period2w(self, period):
		return 2*math.pi/period

	def extra_repr(self):
		txt = strings.get_string_from_dict({
			'te_features':self.te_features,
			'min_te_period':self.min_te_period,
			'max_te_period':self.max_te_period,
			'te_periods':[f'{p:.3f}' for p in tensor_to_numpy(self.get_te_periods())],
			'te_phases':[f'{p:.3f}' for p in tensor_to_numpy(self.get_te_phases())],
			'te_scales':[f'{p:.3f}' for p in tensor_to_numpy(self.get_te_scales())],
			'time_noise_window':self.time_noise_window,
			}, ', ', '=')
		return txt

	def get_info(self):
		assert not self.training, 'you can not access this method in trining mode'
		d = {
			'te_features':self.te_features,
			'initial_ws':self.initial_ws,
			'initial_phases':self.initial_phases,
			'te_ws':tensor_to_numpy(self.get_te_ws()),
			'te_periods':tensor_to_numpy(self.get_te_periods()),
			'te_phases':tensor_to_numpy(self.get_te_phases()),
			'te_scale':tensor_to_numpy(self.get_te_scales()),
			}
		return d

	def __repr__(self):
		txt = f'TemporalEncoding({self.extra_repr()})'
		txt += f'({len(self):,}[p])'
		return txt

	def get_output_dims(self):
		#return self.te_features+1
		return self.te_features

	def get_te_ws(self):
		if self.requires_grad:
			#te_ws = cyclic_mod(self.te_ws, self.min_w, self.max_w) # horrible
			te_ws = softclamp(self.te_ws, self.min_w, self.max_w)
			#te_ws = softclamp(self.te_ws, 0., self.max_w)
		else:
			te_ws = self.te_ws
		return te_ws

	def get_te_periods(self):
		te_ws = self.get_te_ws()
		te_periods = self.w2period(te_ws)
		return te_periods

	def get_te_scales(self):
		return self.te_scales

	def get_te_phases(self):
		#te_phases = torch.tanh(self.te_phases)*te_periods
		return self.te_phases

	def forward(self, time, **kwargs):
		# time (b,t)
		assert len(time.shape)==2

		if self.training and self.time_noise_window>0:
			#print(time, time.device)
			uniform_noise = torch.rand(size=(1, time.shape[1]), device=time.device) # (1,t) # (0,1) noise
			uniform_noise = self.time_noise_window*(uniform_noise-0.5) # k*(-0.5,0.5)
			#print(uniform_noise)
			time = time+uniform_noise # (b,t)+(1,t) > (b,t)
			#print("2",time)

		te_ws = self.get_te_ws()
		te_phases = self.get_te_phases()
		te_scales = self.get_te_scales()
		encoding = _te(te_ws, te_phases, te_scales, time)
		#print(encoding.shape, encoding.device)
		return encoding

	def __len__(self):
		return utils.count_parameters(self)

###################################################################################################################################################

class TimeFILM(nn.Module):
	def __init__(self, input_dims, te_features, max_te_period,
		fourier_dims=1,
		kernel_size=2,
		time_noise_window=0, # regularization in time units
		#bias=True, # True False # useful only when using an activation function?
		**kwargs):
		super().__init__()
		self.input_dims = input_dims
		self.te_features = te_features
		self.max_te_period = max_te_period
		self.fourier_dims = int(input_dims*fourier_dims)

		self.fourier_dims = input_dims

		self.kernel_size = kernel_size
		self.time_noise_window = time_noise_window
		#self.bias = bias
		self.reset()

	def reset(self):
		linear_kwargs = {
			'activation':'linear',
			#'bias':self.bias,
			}
		assert self.input_dims>0
		te_kwargs = {
			'time_noise_window':self.time_noise_window,
		}
		self.te_mod_alpha = TemporalEncoding(self.te_features, self.max_te_period, **te_kwargs)
		#self.te_mod_beta = TemporalEncoding(self.te_features, self.max_te_period)
		print('te_mod_alpha:',self.te_mod_alpha)

		#self.gamma_f = Linear(self.te_features, self.fourier_dims, bias=False, **linear_kwargs) # BIAS MUST BE FALSE
		#self.beta_f = Linear(self.te_features, self.fourier_dims, bias=False, **linear_kwargs) # BIAS MUST BE FALSE
		self.gamma_beta_f = Linear(self.te_features, self.fourier_dims, split_out=2, bias=False, **linear_kwargs) # BIAS MUST BE FALSE
		# torch.nn.init.constant_(self.gamma_beta_f.linear.weight, 1.)

		#self.gamma_w = nn.Parameter(torch.ones((self.mod_output_dims, self.mod_input_dims)), requires_grad=False)
		#self.gamma_f = nn.Linear(self.mod_input_dims, self.mod_output_dims, bias=False)
		
		# self.x_proj = Linear(self.input_dims, self.fourier_dims, bias=False, **linear_kwargs) # BIAS MUST BE FALSE

		#self.z_proj = Linear(self.fourier_dims, self.input_dims, bias=True, **linear_kwargs)
		#print('z_proj',self.z_proj)

		self.cnn_pad = nn.ConstantPad1d([self.kernel_size-1, 0], 0)
		self.cnn = nn.Conv1d(self.fourier_dims, self.input_dims, kernel_size=self.kernel_size, padding=0, bias=True)

		#self.gamma_beta_mlp = MLP(self.mod_input_dims, self.mod_output_dims*2, [self.mod_input_dims], activation='relu')
		#self.bn_fourier = MaskedBatchNorm1d(self.fourier_dims, affine=False)# if self.uses_length_wise_batchnorm else LayerNorm(self.input_dims)
		#self.bn = MaskedBatchNorm1d(self.input_dims)# if self.uses_length_wise_batchnorm else LayerNorm(self.input_dims)

	def get_info(self):
		assert not self.training, 'you can not access this method in trining mode'
		d = {
			'weight':tensor_to_numpy(self.gamma_beta_f.linear.weight),
			}
		d.update(self.te_mod_alpha.get_info())
		return d

	def mod_x(self, x, time, onehot):
		#gamma = self.gamma_f(torch.cat([x,mod], dim=-1))
		#gamma = self.gamma_f(te_alpha)
		#beta = self.beta_f(te_beta)
		te_alpha = self.te_mod_alpha(time)
		gamma, beta = self.gamma_beta_f(te_alpha)
		# gamma = gamma/math.sqrt(self.te_features//2)
		# beta = beta/math.sqrt(self.te_features//2)

		#mod_x = self.x_proj(x)*gamma+beta
		#mod_x = x*gamma+beta
		#gamma = _gamma+1
		mod_x = x*gamma+beta
		# mod_x = self.x_proj(x)*gamma+beta

		mod_x = mod_x.permute(0,2,1)
		mod_x = self.cnn(self.cnn_pad(mod_x))
		mod_x = mod_x.permute(0,2,1)

		return mod_x

	def forward(self, x, time, onehot, **kwargs):
		# x (b,t,fx)
		# time (b,t)
		assert x.shape[-1]==self.input_dims
		#te_beta = self.te_mod_beta(time)
		
		#x = self.mod_x(x, te_alpha, te_beta)

		#x = self.mod_x(x, te_alpha, onehot)
		#x = self.bn(x, onehot) # PRE NORM
		#x = sub_x
		f_x = self.mod_x(x, time, onehot)
		x = F.relu(x+f_x) # x=x+f(x)
		#x = self.bn(x, onehot) # POST NORM
		#print(x)

		return x

	def __len__(self):
		return utils.count_parameters(self)
		
	def extra_repr(self):
		txt = strings.get_string_from_dict({
		'input_dims':self.input_dims,
		'fourier_dims':self.fourier_dims,
		'kernel_size':self.kernel_size,
		}, ', ', '=')
		return txt

	def __repr__(self):
		txt = f'TimeFILM({self.extra_repr()})'
		txt += f'({len(self):,}[p])'
		return txt